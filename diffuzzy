#!/usr/bin/env bash

NAME="diffuzzy"
CODENAME="diffuzzy"
COPYRIGHT="Copyright (C) 2018 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="0.0.0.0"

# \brief Compare two paths recursively with a probabilistic diff
# \param $1 The first path to compare
# \param $2 The second path to compare
function diffuzzy_compare
{
	if [ ! -e "$1" ]; then
		echo "Path \"$1\" does not exist."
		return 1
	fi
	if [ ! -e "$2" ]; then
		echo "Path \"$2\" does not exist."
		return 1
	fi
	local PATH1="$1"
	local PATH2="$2"
	
	# if either file is non-regular and they have different types
	PATH1_TYPE=$(stat -c %F "$PATH1")
	PATH2_TYPE=$(stat -c %F "$PATH2")
	echo "$PATH1_TYPE" | grep -q regular
	PATH1_TYPE_REGULAR=$?
	echo "$PATH2_TYPE" | grep -q regular
	PATH2_TYPE_REGULAR=$?
	if [ $PATH1_TYPE_REGULAR -ne 0 -o $PATH2_TYPE_REGULAR -ne 0 ]; then
		if [ "$PATH1_TYPE" != "$PATH2_TYPE" ]; then
			echo "File type mismatch between \"$PATH1\" ($PATH1_TYPE) and \"$PATH2\" ($PATH2_TYPE)."
			return 1
		fi
	fi
	
	# if both are directories
	if [ -d "$PATH1" -a -d "$PATH2" ]; then
		#echo "Comparing two directory trees..."
		{
			cd "$PATH1"
			find ! -type d -print0
			cd "$PATH2"
			find ! -type d -print0
		} | \
		sort -z | uniq -z | \
		{
			local STATUS=0
			while read -r -d $'\0' FILE; do
				# strip the leading ./ that find prepends to each string
				FILE=$(echo -n "$FILE" | sed -r 's/^\.\///')
				#echo "$FILE"
				diffuzzy_compare "$PATH1/$FILE" "$PATH2/$FILE"
				if [ $? -ne 0 ]; then
					STATUS=1
				fi
			done
			return $STATUS
		}
		if [ $? -ne 0 ]; then
			return 1
		fi
		#echo "Both directory trees are the same"
		return 0
	fi

	PATH1_SIZE=$(stat -c %s "$PATH1")
	PATH2_SIZE=$(stat -c %s "$PATH2")

	# if both files are different sizes
	if [ "$PATH1_SIZE" != "$PATH2_SIZE" ]; then
		echo "File size mismatch between \"$PATH1\" and \"$PATH2\"."
		return 1
	fi

	# full comparison if both files are small
	if [ $(echo "$PATH1_SIZE<=1024" | bc) -eq 1 ]; then
		diff -q "$PATH1" "$PATH2" >/dev/null
		if [ $? -ne 0 ]; then
			echo "File data differs between \"$PATH1\" and \"$PATH2\"."
			return 1
		else
			return 0
		fi
	fi

	# compare the first 512 bytes
	PATH1_DATA=$(dd status=none if="$PATH1" bs=1 count=512 | base64 -w 0)
	PATH2_DATA=$(dd status=none if="$PATH2" bs=1 count=512 | base64 -w 0)
	if [ "$PATH1_DATA" != "$PATH2_DATA" ]; then
		echo "The first 512 bytes differ between \"$PATH1\" and \"$PATH2\"."
		return 1
	fi

	# compare the last 512 bytes
	PATH1_DATA=$(dd status=none if="$PATH1" bs=1 count=512 skip=$(($PATH1_SIZE-512)) | base64 -w 0)
	PATH2_DATA=$(dd status=none if="$PATH2" bs=1 count=512 skip=$(($PATH2_SIZE-512)) | base64 -w 0)
	if [ "$PATH1_DATA" != "$PATH2_DATA" ]; then
		echo "The last 512 bytes differ between \"$PATH1\" and \"$PATH2\"."
		return 1
	fi

	# perform floor(log(2,file_size)) random offset comparisons
	ITERATOR=1
	SECTORS=$(($PATH1_SIZE/512))
	while [ $ITERATOR -lt $PATH1_SIZE ]; do
		OFFSET=$(( ($RANDOM*$RANDOM*$RANDOM)%$SECTORS ))
		
		PATH1_DATA=$(dd status=none if="$PATH1" bs=512 count=1 skip=$OFFSET | base64 -w 0)
		PATH2_DATA=$(dd status=none if="$PATH2" bs=512 count=1 skip=$OFFSET | base64 -w 0)
		
		if [ "$PATH1_DATA" != "$PATH2_DATA" ]; then
			echo "File data differs between \"$PATH1\" and \"$PATH2\"."
			return 1
		fi
		
		ITERATOR=$(($ITERATOR*2))
	done
	return 0
}

# \brief Displays the help and exits the program
function diffuzzy_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Compare two paths recursively with a probabilistic diff"
	echo
	echo "Usage:"
	echo "  $CODENAME [options] path1 path2"
	echo
	echo "Options:"
	echo "  -h, --help"
	echo "    Display this help message and exit."
	echo "  --unittest"
	echo "    Perform unit tests to verify functionality of this script."
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
	exit
}

# \brief Perform unit tests to verify functionality of this script
function diffuzzy_unittest
{
	local TMP="/tmp/diffuzzy.$$"
	mkdir "$TMP"
	
	echo "Compare two files with different types: regular empty file vs. directory..."
	touch "$TMP/01.bin"
	mkdir "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin"
	rmdir "$TMP/02.bin"
	
	echo "Compare two files with different types: regular empty file vs. fifo..."
	touch "$TMP/01.bin"
	mkfifo "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	dd status=none if=/dev/urandom bs=10MiB count=1 of="$TMP/1.random"
	dd status=none if=/dev/urandom bs=10MiB count=1 of="$TMP/2.random"
	dd status=none if=/dev/urandom bs=10MiB count=1 of="$TMP/3.random"
	
	echo "Compare two files with different sizes..."
	dd status=none if=/dev/urandom bs=1MiB count=4 of="$TMP/01.bin"
	dd status=none if=/dev/urandom bs=1MiB count=6 of="$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	echo "Compare two small files..."
	dd status=none if=/dev/urandom bs=768 count=1 of="$TMP/01.bin"
	dd status=none if=/dev/urandom bs=768 count=1 of="$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	cp "$TMP/01.bin" "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -ne 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	echo "Compare two files with a different header..."
	dd status=none if=/dev/urandom bs=512 count=1 of="$TMP/01.bin"
	cat "$TMP/1.random" >> "$TMP/01.bin"
	dd status=none if=/dev/urandom bs=512 count=1 of="$TMP/02.bin"
	cat "$TMP/1.random" >> "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	echo "Compare two files with a different footer..."
	dd status=none if=/dev/urandom bs=10MiB count=1 of="$TMP/01.bin"
	cp "$TMP/01.bin" "$TMP/02.bin"
	dd status=none if=/dev/urandom bs=512 count=1 >> "$TMP/01.bin"
	dd status=none if=/dev/urandom bs=512 count=1 >> "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	echo "Simulate a preallocated failed transfer..."
	dd status=none if=/dev/urandom bs=10MiB count=1 of="$TMP/01.bin"
	cp "$TMP/01.bin" "$TMP/02.bin"
	dd status=none if=/dev/urandom bs=10MiB count=2 >> "$TMP/01.bin"
	truncate -s 30MiB "$TMP/02.bin"
	diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
	if [ $? -eq 0 ]; then
		echo "error: test failed."
		return 1
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"
	
	echo "Simulate bitrot"
	dd status=none if=/dev/urandom bs=1MiB count=100 >> "$TMP/01.bin"
	cp "$TMP/01.bin" "$TMP/02.bin"
	local SECTOR=0
	while [ $SECTOR -lt 10000 ]; do
		dd status=none if=/dev/urandom bs=512 count=1 seek=$(($RANDOM*$RANDOM%204800)) conv=notrunc of="$TMP/02.bin"
		diffuzzy_compare "$TMP/01.bin" "$TMP/02.bin"
		local RESULT=$?
		if [ $RESULT -eq 1 ]; then
			break
		fi
		SECTOR=$(($SECTOR+1))
	done
	if [ $SECTOR -eq 10000 ]; then
		echo "error: test failed."
		return 1
	else
		echo "bitrot detected after $SECTOR corrupted sectors."
	fi
	rm -f "$TMP/01.bin" "$TMP/02.bin"

	rm -rf "$TMP"
}

#------------------------------------------------------------------------------
# command line arguments

THIS="$0"
if [ $# -eq 1 -a "$1" = "--unittest" ]; then
	diffuzzy_unittest
	exit $?
fi
if [ $# -lt 2 ]; then
	diffuzzy_help
	exit 1
fi
while [ $# -ne 2 ]; do
	case "$1" in
		"-h"|"--help")
			diffuzzy_help
			exit 1
			;;
		*)
			diffuzzy_help
			exit 1
			;;
	esac
done
PATH1=$(readlink -f "$1")
PATH2=$(readlink -f "$2")

#------------------------------------------------------------------------------
# begin execution

diffuzzy_compare "$PATH1" "$PATH2"
exit $?
